package com.javachallenge.comcast;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 * This class can be used to simulate a car buying exercise. This demonstrates usage of Apache POI library to 
 * read and update xlsx (Excel 2010) file. This also makes use of getting user input through Scanner object
 * 
 * @author Roopali Sahoo
 *
 */
public class CalculateFinalPrice 
{
	public static String fileName = "/home/roopali/javacode/car_inventory.xlsx";
	public static void main(String[] args) 
	{
		/*
		 * 1. Get user input, which item number selected. Error if input is not numeric, or if number not found 
		 * 2. readFromInventory, show price details
		 * 3. Ask user if need to select one more car
		 * 4. If yes, then take input, repeat 1 and 2
		 * 5. Allows maximum up to 2 cars to select in one transaction
		 * 6. Calculate tax and show final price to user
		 * 7. Ask user if they want to proceed with transaction.
		 * 8. If yes, call updateInventory, show success message
		 */
		System.out.println("Hello Customer! Let us show you what we have in our inventory!");

		//This hashmap will be used to store customer selections
		HashMap<Integer, String> multiSelect = new HashMap<Integer, String>();
		
		//Read all the available cars from the xlsx (Excel 2010) file and display to the customer
		String outputFromInventory = readFromInventory (99999, multiSelect);
		if (outputFromInventory.length() > 0)
		{
			System.out.println("Please select a car of your choice. Enter the corresponding code provided before the car name");
			Scanner sc = new Scanner(System.in);
			if (!sc.hasNextInt())
			{
				System.out.println("You need to enter a numeric value! Better luck next time!");
			}
			else
			{
				int userSelection = sc.nextInt();
				if (userSelection >= 1 && userSelection <= 10)
				{
					System.out.println("CAR ID\tCAR NAME\tPRICE (BEFORE TAX)");
					//Call readFromInventory to get details based on user selection
					outputFromInventory = readFromInventory (userSelection, multiSelect);
					//Add user selection detail to hashmap for later use
					multiSelect.put(userSelection, outputFromInventory);
					userSelection = 0;
					//Giving user option to select another car
					System.out.println("How about selecting another car for your partner? Type YES or NO");
					String yesNo = "";
					if (sc.hasNext())
					{
						yesNo = sc.next();
						if (yesNo.equalsIgnoreCase("YES"))
						{
							System.out.println("Great! That's the buying spirit! Enter the corresponding code provided before the car name");
							userSelection = sc.nextInt();
							if (userSelection >= 1 && userSelection <= 10)
							{
								System.out.println("CAR ID\tCAR NAME\tPRICE (BEFORE TAX)");
								//Call readFromInventory again to get details based on user selection
								outputFromInventory = readFromInventory (userSelection, multiSelect);
								//Add user selection detail to hashmap for later use
								multiSelect.put(userSelection, outputFromInventory);
							}
						}
						else
							System.out.println("Ok looks like you don't want to buy another one! That's fine! ");
					}
					else
						System.out.println("Ok looks like you don't want to buy another one! That's fine! ");

					if (multiSelect != null && multiSelect.size() > 0);
					{
						System.out.println("Enter YES to proceed with the transaction");
						yesNo = sc.next();
						if (yesNo.equalsIgnoreCase("YES"))
						{
							//Now call the following method to calculate tax and final price, then update inventory
							transactAndUpdateInventory (multiSelect);
							System.out.println("Congratulations! Thank you for your business!");
						}
						else
						{
							System.out.println("So you decided not to buy anything today. That's fine. See you later!");
						}
					}
				}
				else
			System.out.println("Invalid car selection! It seems we don't have the car you need! Better luck next time!");
			}
			sc.close();
		}
		else
		{
			System.out.println("Oops! We have run out of inventory. Please visit again in few day! Thank you for stopping by!");
		}
		multiSelect = null;
		
	}
	
	/**
	 * This method will read from the xlsx (excel 2010) file. 
	 * If readSelection parameter is 99999, then this method will display all available cars in the inventory (xlsx file) fetching from ITEM_NAME
	 * If readSelection parameter is any other value, then this method will read the corresponding row details from the inventory xlsx file, 
	 * for example if readSelection value is 5, then this method returns details for row 5 
	 * 
	 * @param readSelection
	 * @param multiSelect
	 * @return
	 * 
	 */
	public static String readFromInventory (int readSelection, HashMap<Integer, String> multiSelect)
	{
		FileInputStream inputFile = null;
		StringBuffer forLaterUse = new StringBuffer ("");
		String retString = null;
		try
		{
			//Open file for reading
			inputFile = new FileInputStream(new File(fileName));

			//Create Workbook instance with reference to xlsx file
			XSSFWorkbook workbook = new XSSFWorkbook(inputFile);

			//Get worksheet from the workbook
			XSSFSheet sheet = workbook.getSheetAt(0);

			//Iterate through each rows one by one
			Iterator<Row> rowIterator = sheet.iterator();
			int itemCount = 0;
			//This variable will be used so that we read only the row requested by customer
			boolean readThisRow = false;
			while (rowIterator.hasNext()) 
			{
				//Read each row
				Row row = rowIterator.next();
				//Skipping first row as it contains excel column headers like ITEM_ID, ITEM_NAME, etc.
				if (row.getRowNum() != 0)
				{
					//For each row, iterate through all the columns
					Iterator<Cell> cellIterator = row.cellIterator();
					//This stringbuffer will be used to store the details fetched from the rows based on customer selection
					StringBuffer showToCustomer = new StringBuffer ("");
					//Iterate through each column value for the row
					while (cellIterator.hasNext()) 
					{
						//Read each cell value
						Cell cell = cellIterator.next();
						//99999 will return all the car names from inventory
						if (readSelection == 99999)
						{
							retString = "ignore";
							//Fetch only ITEM_NAME column
							if (cell.getColumnIndex() == 1)
							{
								itemCount ++;
								//Check the cell type. If NUMERIC value, then use getNumericCellValue, if STRING, then use getStringCellValue
								switch (cell.getCellType()) 
								{
									case Cell.CELL_TYPE_NUMERIC:
										System.out.print(itemCount + ": " + (int)(cell.getNumericCellValue()) + "\t");
										break;
									case Cell.CELL_TYPE_STRING:
										System.out.print(itemCount + ": " + cell.getStringCellValue() + "\t");
										break;
								}
							}
						}
						else //Any other input than 99999
						{
							//Check the cell type. If NUMERIC value, then use getNumericCellValue, if STRING, then use getStringCellValue
							switch (cell.getCellType()) 
							{
								case Cell.CELL_TYPE_NUMERIC:
									if (cell.getColumnIndex() == 0 && (int)(cell.getNumericCellValue()) == readSelection)
										readThisRow = true;
									if (cell.getColumnIndex() == 0 || cell.getColumnIndex() == 1 || cell.getColumnIndex() == 3)
										showToCustomer.append((int)(cell.getNumericCellValue()) + "\t");
									//Just being lazy here, it could have been done using get/set methods, never tried
									forLaterUse.append((int)(cell.getNumericCellValue()) + "@@@@");
									break;
								case Cell.CELL_TYPE_STRING:
									//System.out.print(cell.getStringCellValue() + "\t");
									if (cell.getColumnIndex() == 0 || cell.getColumnIndex() == 1 || cell.getColumnIndex() == 3)
										showToCustomer.append(cell.getStringCellValue() + "\t");
									//Just being lazy here, it could have been done using get/set methods, never tried
									forLaterUse.append(cell.getStringCellValue() + "@@@@");
									break;
							}
						}
					}
					if (readThisRow)
					{
						System.out.println(showToCustomer.toString());
						System.out.println("");
						retString = forLaterUse.toString();
					}
					//Re-initialize
					showToCustomer = new StringBuffer("");
					forLaterUse = new StringBuffer ("");
					readThisRow = false;
					if (readSelection == 99999)
						System.out.println("");
				}
			}
		} 
		catch (FileNotFoundException fnfe) 
		{
			System.out.println("Input file not found!");
			fnfe.printStackTrace();
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				//Closing the input file stream as part of finally block
				inputFile.close();
			}
			catch (Exception fe)
			{
				System.out.println("Error closing input file");
				fe.printStackTrace();
			}
		}
		return retString;
	}
	
	/**
	 * This method is used to calculate the final price based on tax bracket. 
	 * - If a STANDARD car is selected, then add 1% as tax.
	 * - If a LUXURY car is selected, then add 9% as tax
	 * This takes the user selection details as input. We don't need to read the file again
	 * to find details of user selection
	 * 
	 * @param multiSelect
	 */
	public static void transactAndUpdateInventory (HashMap<Integer, String> multiSelect)
	{
		FileInputStream inputFile = null;
		FileOutputStream outputFile = null;
		try
		{
			//Iterator to read hashmap details
		    Iterator it = multiSelect.entrySet().iterator();
		    //To store final price for each car selected
		    double finalPrice = 0.0;
		    //To store the total final price 
		    double totalFinalPrice = 0.0;
		    //Store tax rate
		    double taxRate = 0.0;
		    String[] userSelectionArray = null;
		    StringBuffer userSelectBuf = new StringBuffer ("");
		    
		    //Open file to read and then update value
		    inputFile = new FileInputStream(new File(fileName));

			//Create Workbook instance with reference to xlsx file
			XSSFWorkbook transactWorkbook = new XSSFWorkbook(inputFile);

			//Get worksheet from the workbook
			XSSFSheet transactSheet = transactWorkbook.getSheetAt(0);

		    while (it.hasNext()) 
		    {
		        Map.Entry tempSelectionDetails = (Map.Entry)it.next();
		        //Now split the user selection details
		        userSelectionArray = ((String)tempSelectionDetails.getValue()).split("@@@@");
		        // To avoid any potential ConcurrentModificationException
		        it.remove();
		        int countSelection = 0;
		        for (int i=0; i<userSelectionArray.length; i++)
		        {
		        	countSelection++;
		        	if (i==1)
		        	{
		        		userSelectBuf.append("CAR: " + userSelectionArray[i] + " ::: ");
		        	}
		        	if (i==2)
		        	{
		        		//Calculate tax based on CAR type
		        		if (userSelectionArray[i].equalsIgnoreCase("STANDARD"))
		        		{
		        			taxRate = 0.01;
		        		}
		        		else if (userSelectionArray[i].equalsIgnoreCase("LUXURY"))
		        		{
		        			taxRate = 0.09;
		        		}
		        	}
		        	if (i==3)
		        	{
		        		//Calculate price
		        		userSelectBuf.append("PRICE (BEFORE TAX): " + userSelectionArray[i] + " ::: ");
		        		finalPrice = Integer.parseInt(userSelectionArray[i]) + Integer.parseInt(userSelectionArray[i]) * taxRate;
		        		totalFinalPrice += finalPrice;
		        		userSelectBuf.append("PRICE (WITH TAX): " + finalPrice);
		        	}
		        	if(i==4)
		        	{
		        		//Update inventory based on selection
		    			XSSFRow row1 = transactSheet.getRow(Integer.parseInt(tempSelectionDetails.getKey().toString()));
		    			if (countSelection <=1)
		    			{
		    				XSSFCell cellGt1 = row1.getCell(4);
		    				cellGt1.setCellValue(Integer.parseInt(userSelectionArray[i]) - 1);
		    			}
		    			else
		    			{
		    				XSSFCell cellGt2 = row1.getCell(4);
		    				cellGt2.setCellValue(Integer.parseInt(userSelectionArray[i]) - 1);		    				
		    			}
		        	}
		        	
		        }
		        userSelectBuf.append("\n");
		    }
		    System.out.println("Final selection --> \n" + userSelectBuf.toString());
		    System.out.println("Final Price --> " + totalFinalPrice);
		    //Close file so that we can update it
		    inputFile.close();
		    //Create output stream
			outputFile =new FileOutputStream(fileName);
			//Update xlsx file specifically QUANTITY column
		    transactWorkbook.write(outputFile);
		    System.out.println("Inventory updated");
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		finally
		{
			try
			{
				//Close input and output files
				if (inputFile != null)
					inputFile.close();
				if (outputFile != null)
					outputFile.close();
			}
			catch (Exception fe)
			{
				System.out.println("Error closing input or output file");
				fe.printStackTrace();
			}
		}
	}
}
